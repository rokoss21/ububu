package report

import (
	"os"
	"strings"
	"testing"
	"time"
)

func TestGenerator_New(t *testing.T) {
	gen := NewGenerator()
	if gen == nil {
		t.Error("NewGenerator() returned nil")
	}
}

func TestGenerator_GenerateFileName(t *testing.T) {
	gen := NewGenerator()
	filename := gen.generateFileName()
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
	if filename == "" {
		t.Error("generateFileName() returned empty string")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å
	if !strings.HasPrefix(filename, "ububu-report-") {
		t.Errorf("Filename should start with 'ububu-report-', got: %s", filename)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .log
	if !strings.HasSuffix(filename, ".log") {
		t.Errorf("Filename should end with '.log', got: %s", filename)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É
	now := time.Now()
	expectedDate := now.Format("2006-01-02")
	if !strings.Contains(filename, expectedDate) {
		t.Errorf("Filename should contain today's date %s, got: %s", expectedDate, filename)
	}
}

func TestGenerator_GenerateFullReport(t *testing.T) {
	gen := NewGenerator()
	testLogContent := "Test log content\nLine 2\nLine 3"
	
	report := gen.GenerateFullReport(testLogContent)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
	if report == "" {
		t.Error("generateFullReport() returned empty string")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
	if !strings.Contains(report, "Ububu 1.0") {
		t.Error("Report should contain 'Ububu 1.0'")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É
	now := time.Now()
	expectedDate := now.Format("2006-01-02")
	if !strings.Contains(report, expectedDate) {
		t.Errorf("Report should contain today's date %s", expectedDate)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ª–æ–≥
	if !strings.Contains(report, testLogContent) {
		t.Error("Report should contain the provided log content")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	if !strings.Contains(report, "SYSTEM INFORMATION") {
		t.Error("Report should contain system information section")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–¥–∫—É
	if !strings.Contains(report, "SUMMARY") {
		t.Error("Report should contain summary section")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥ —Å–µ–∫—Ü–∏—é
	if !strings.Contains(report, "OPTIMIZATION LOG") {
		t.Error("Report should contain optimization log section")
	}
}

func TestGenerator_GetSystemInfo(t *testing.T) {
	gen := NewGenerator()
	sysInfo := gen.getSystemInfo()
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
	if sysInfo == "" {
		t.Error("getSystemInfo() returned empty string")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	if user := os.Getenv("USER"); user != "" {
		if !strings.Contains(sysInfo, user) {
			t.Errorf("System info should contain username %s", user)
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç hostname
	if hostname, err := os.Hostname(); err == nil {
		if !strings.Contains(sysInfo, hostname) {
			t.Errorf("System info should contain hostname %s", hostname)
		}
	}
}

func TestGenerator_GenerateFullReport_WithEmptyLog(t *testing.T) {
	gen := NewGenerator()
	report := gen.GenerateFullReport("")
	
	// –î–∞–∂–µ —Å –ø—É—Å—Ç—ã–º –ª–æ–≥–æ–º –æ—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	if !strings.Contains(report, "Ububu 1.0") {
		t.Error("Report should contain header even with empty log")
	}
	
	if !strings.Contains(report, "SYSTEM INFORMATION") {
		t.Error("Report should contain system information section even with empty log")
	}
}

func TestGenerator_GenerateFullReport_WithSpecialCharacters(t *testing.T) {
	gen := NewGenerator()
	testLogContent := "Test with special chars: √°√©√≠√≥√∫ √± ‰∏≠Êñá üêß <>&\""
	
	report := gen.GenerateFullReport(testLogContent)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
	if !strings.Contains(report, testLogContent) {
		t.Error("Report should handle special characters correctly")
	}
}

func TestGenerator_GenerateFullReport_Structure(t *testing.T) {
	gen := NewGenerator()
	testLogContent := "Sample log content"
	
	report := gen.GenerateFullReport(testLogContent)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á–µ—Ç–∞
	sections := []string{
		"Ububu 1.0 - System Optimization Report",
		"SYSTEM INFORMATION",
		"OPTIMIZATION LOG",
		"SUMMARY",
		"End of Report",
	}
	
	for _, section := range sections {
		if !strings.Contains(report, section) {
			t.Errorf("Report should contain section: %s", section)
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ü–∏–∏ –∏–¥—É—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	lastIndex := -1
	for _, section := range sections {
		index := strings.Index(report, section)
		if index <= lastIndex {
			t.Errorf("Section '%s' should appear after previous sections", section)
		}
		lastIndex = index
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
func BenchmarkGenerator_GenerateFullReport(b *testing.B) {
	gen := NewGenerator()
	testLogContent := strings.Repeat("Test log line\n", 1000) // 1000 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
	
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = gen.GenerateFullReport(testLogContent)
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
func BenchmarkGenerator_GenerateFileName(b *testing.B) {
	gen := NewGenerator()
	
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = gen.generateFileName()
	}
}